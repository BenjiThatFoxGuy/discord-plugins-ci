name: Release
on:
    schedule:
      - cron: '0 1 * * *' # Every day at 1am UTC
      # - cron: '0 1 * * 1' # Every Monday at 1am UTC
      
    push:
        tags:
            - v*
        branches:
            - main
    workflow_dispatch: {}
env:
    FORCE_COLOR: true
    GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    GH_TOKEN: ${{ secrets.GH_TOKEN }}
    USERNAME: GitHub-Actions

permissions: write-all

concurrency:
  group: equicord-submodules
  cancel-in-progress: false
jobs:
    Build:
        name: Build Equicord
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4
              with:
                submodules: 'recursive'

            - name: Update submodules
              run: |
                git submodule sync --recursive
                git submodule update --init --recursive
                if [ -d "userplugins-equicord" ]; then
                  cd userplugins-equicord
                  git fetch origin equicord:equicord
                  git checkout equicord || git checkout -b equicord origin/equicord
                  cd ..
                fi
                if [ -d "equicord" ]; then
                  cd equicord
                  git fetch origin main:main
                  git checkout main || git checkout -b main origin/main
                  cd ..
                fi


            - name: Copy equicord/package.json to root
              run: cp equicord/package.json ./ ; cp equicord/pnpm-lock.yaml ./ ; cp equicord/pnpm-workspace.yaml ./

            - uses: pnpm/action-setup@v3
              with:
                run_install: false

            - name: Use Node.js 20
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: "pnpm"

            - name: Install dependencies
              working-directory: equicord
              run: pnpm install --no-frozen-lockfile


            - name: Move userplugins-equicord to equicord/userplugins
              run: |
                  if [ -d "userplugins-equicord" ]; then
                    rm -rf equicord/src/userplugins
                    mv userplugins-equicord equicord/src/userplugins
                  fi

            - name: Remove stock Equicord plugins listed in file
              run: |
                  LIST_FILE="ci-overrides/remove-equicord-plugins.txt"
                  BASE_DIR="equicord/src/equicordplugins"
                  if [ -f "$LIST_FILE" ]; then
                    echo "Reading removal list from $LIST_FILE"
                    while IFS= read -r raw || [ -n "$raw" ]; do
                      # strip CR, trim comments and trailing whitespace
                      name=$(echo "$raw" | sed 's/\r//; s/#.*//; s/[[:space:]]*$//')
                      [ -z "$name" ] && continue
                      echo "Looking for plugins matching: $name"
                      # find case-insensitively any folder that contains the token
                      while IFS= read -r dir; do
                        [ "$dir" = "$BASE_DIR" ] && continue
                        echo "Removing: $dir"
                        rm -rf "$dir"
                      done < <(find "$BASE_DIR" -maxdepth 1 -mindepth 1 -type d -iname "*${name}*" -printf '%p\n')
                    done < "$LIST_FILE"
                  else
                    echo "No removal list found at $LIST_FILE; skipping."
                  fi

            - name: Cleanup removal list (workspace only)
              run: |
                  rm -f ci-overrides/remove-equicord-plugins.txt || true

            - name: Apply CI overrides to Equicord
              run: |
                  if [ -d "ci-overrides/equicord" ]; then
                    if command -v rsync >/dev/null 2>&1; then
                      rsync -a ci-overrides/equicord/ equicord/
                    else
                      shopt -s dotglob || true
                      cp -r ci-overrides/equicord/* equicord/ || true
                      shopt -u dotglob || true
                    fi
                  fi

            - name: Compute repo and Equicord submodule hashes (9 chars)
              id: compute_hashes
              run: |
                REPO_HASH=$(git rev-parse --short=9 HEAD)
                echo "repo_hash=$REPO_HASH" >> $GITHUB_OUTPUT
                cd equicord
                EQUI_HASH=$(git rev-parse --short=9 HEAD)
                echo "equicord_hash=$EQUI_HASH" >> $GITHUB_OUTPUT

            - name: Build web
              working-directory: equicord
              env:
                EQUICORD_HASH: ${{ steps.compute_hashes.outputs.repo_hash }}
              run: pnpm buildWebStandalone

            - name: Build
              working-directory: equicord
              env:
                EQUICORD_REMOTE: BenjiThatFoxGuy/discord-plugins-ci
                EQUICORD_HASH: ${{ steps.compute_hashes.outputs.repo_hash }}
              run: pnpm buildStandalone

            - name: Generate plugin list
              working-directory: equicord
              env:
                EQUICORD_REMOTE: BenjiThatFoxGuy/discord-plugins-ci
                EQUICORD_HASH: ${{ steps.compute_hashes.outputs.repo_hash }}
              run: pnpm generatePluginJson dist/plugins.json

            - name: Generate Equicord plugin list
              working-directory: equicord
              env:
                EQUICORD_REMOTE: BenjiThatFoxGuy/discord-plugins-ci
                EQUICORD_HASH: ${{ steps.compute_hashes.outputs.repo_hash }}
              run: pnpm generateEquicordPluginJson dist/equicordplugins.json

            - name: Generate build metadata (repo and equicord hashes)
              id: gen_build_meta
              working-directory: equicord
              run: |
                mkdir -p dist
                echo "{\"ciHash\":\"${{ steps.compute_hashes.outputs.repo_hash }}\",\"repoHash\":\"${{ steps.compute_hashes.outputs.repo_hash }}\",\"equicordHash\":\"${{ steps.compute_hashes.outputs.equicord_hash }}\"}" > dist/build-meta.json
            
            - name: Collect files to be released
              working-directory: equicord
              run: |
                  cd dist
                  mkdir release

                  # cp browser/browser.* release
                  # cp Vencord.user.{js,js.LEGAL.txt} release

                  # copy the plugin data jsons, the extension zips and the desktop/vesktop asars (includes build-meta.json)
                  cp *.{json,zip,asar} release

                  # legacy un-asared files
                  cp desktop/* release
                  for file in equibop/*; do
                    filename=$(basename "$file")
                    cp "$file" "release/equibop${filename^}"
                  done

                  find release -size 0 -delete
                  rm release/package.json
                  rm release/*.map

            - name: Compute release name
              id: release_name
              run: |
                MSG="${GITHUB_HEAD_REF:+$(git log -1 --pretty=%s origin/$GITHUB_HEAD_REF)}"
                if [ -z "$MSG" ]; then MSG=$(git log -1 --pretty=%s); fi
                if [ "$MSG" = "chore: update submodule references to latest [automated]" ]; then
                  NAME="scheduled: Daily keep up with upstream [Equicord]"
                else
                  NAME="$MSG"
                fi
                echo "name=$NAME" >> $GITHUB_OUTPUT


            - name: Upload Equicord Stable
              if: ${{ github.ref_name == 'main' }}
              id: upload_release
              continue-on-error: true
              uses: softprops/action-gh-release@v2
              with:
                tag_name: latest
                name: ${{ steps.release_name.outputs.name }}
                files: equicord/dist/release/*
                fail_on_unmatched_files: false
              env:
                GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

            - name: Fallback - Upload release artifact if GH release upload failed
              if: steps.upload_release.outcome == 'failure'
              uses: actions/upload-artifact@v4
              with:
                name: equicord-release
                path: equicord/dist/release/*
                retention-days: 7
